% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validation.R
\name{parseInputFieldNames}
\alias{parseInputFieldNames}
\title{Parse field names of input file to separate out the field name, currency
year, and multiplier.}
\usage{
parseInputFieldNames(FieldNames_, Specs_ls, FileName)
}
\arguments{
\item{FieldNames_}{A character vector containing the field names of an
input file.}

\item{Specs_ls}{A list of specifications for fields in the input file.}

\item{FileName}{A string identifying the name of the file that the field
names are from. This is used for writing error messages.}
}
\value{
A named list with one component for each field. Each component is a list
having 4 named components: Error, Name, Year, Multiplier. The Error
component has a value of character(0) if there are no errors or a character
vector of error messages if there are errors. The Name component is a string
with the name of the field. The Year component is a string with the year
component if the data type is currency or NA if the data type is not currency
or if the Year component has an invalid value. The Multiplier is a number if
the multiplier component is present and is valid. It is NA if there is no
multiplier component and NaN if the multiplier is invalid. Each component of
the list is named with the value of the Name component (i.e. the field name
without the year and multiplier elements.)
}
\description{
\code{parseInputFieldNames} parses the field names of an input file to
separate out the field name, currency year (if data is
currency type), and value multiplier.
}
\details{
The field names of input files can be used to encode more information than
the name itself. It can also encode the currency year for currency type data
and also if the values are in multiples (e.g. thousands of dollars). For
currency type data it is mandatory that the currency year be specified so
that the data can be converted to base year currency values (e.g. dollars in
base year dollars). The multiplier is optional, but needless to say, it can
only be applied to numeric data. The function returns a list with a component
for each field. Each component identifies the field name, year, multiplier,
and error status for the result of parsing the field name. If the field name
was parsed successfully, the error status is character(0). If the field name
was not successfully parsed, the error status contains an error message,
identifying the problem.
}
